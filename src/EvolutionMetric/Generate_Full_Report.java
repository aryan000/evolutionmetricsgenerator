/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EvolutionMetric;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author aryan_000
 */
public class Generate_Full_Report extends javax.swing.JFrame {

    /**
     * Creates new form Generate_Full_Report
     */
    public Generate_Full_Report() {
        initComponents();
    }
 
    private String project_name = "";
    private String userPath = "";
    private int version = 0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        select_label = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        select_label.setText("Select all the folders ");

        jButton1.setText("Choose");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(select_label, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(select_label)
                    .addComponent(jButton1))
                .addContainerGap(251, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected  void generate( File [] mydirectory , String proj_name , Helper h)
    {
        
                ProgressBar1 pb = new ProgressBar1();
                pb.setVisible(true);
                File f = new File(userPath + "/"+ proj_name +  ".xls");
                int count = 1;
                int num = 0;
                for (File myfile : mydirectory) {
                    ArrayList<Files> filenames = h.Get_List_Of_Files(myfile);
                    try {
                        if (!f.exists()) {
//                          System.out.println("File Does not exist ");
                            System.out.println("File sheet " + count + " added ");
                            WritableWorkbook workbook = null;
                            h.createSheet(workbook, f);
                            count++;
                        } else {
//                System.out.println("File already found ");
                            System.out.println("File sheet " + count + " added ");
                            Workbook workbook = Workbook.getWorkbook(f);
                            h.addsheet(workbook, f);
                            workbook.close();
                            count++;
                        }
                    } catch (IOException | WriteException | BiffException ex) {
                        Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(rootPane, " File is already opened or File cannot be created");
                    }
                }
//                obj_frame.call(num);
                Metric m = new Metric();
                try {
                    m.addCho(f);// cho and chd
//                        obj_frame.call(num);
                    m.addFchAndLch(f); //fch lch  frch csd csbs lca lcd
//                        obj_frame.call(num);
                    m.addWchAndWCD(f); // wch and wcd
//                        obj_frame.call(num);
                    m.addAcdfAndATAF(f); // ACDF and ATAF and WFR and ICP
//                        obj_frame.call(num);
                    pb.set("ACDF AND ATAF added ", num);
                    m.addCP(f);// cp
//                        obj_frame.call(num);
                    pb.set("CP added ", num);
//                    obj_frame.dispose();
                    pb.setVisible(false);
                    Complete c = new Complete(f);
                    c.setVisible(true);
//                    Reset();
                } catch (IOException | BiffException | WriteException ex) {
                    Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
                }
       
    }
    
    private void generate_cnk(File [] mydirectory)
    {
      
               int i = 0; 
               String filename = "cnk_version";
               for (File cnkfile : mydirectory) {
                   
                   if(i+1<10)
                   {
                       UnderstandHelper h = new UnderstandHelper(cnkfile , userPath , filename +"0" + (i+1));
                         h.execute();
                   }
                   else 
                   { UnderstandHelper h = new UnderstandHelper(cnkfile , userPath , filename + (i+1));
                     h.execute();
                   }
                   
                   i++;
               }
//               throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
          
    }
   
    private Boolean validate_project_name(String proj_name)
    {
        if( proj_name==null || proj_name.isEmpty() )
        { JOptionPane.showMessageDialog(null,"Project name is invalid.. \n Please try again"); return false; }
        
        else
        {
        String userDir = System.getProperty("user.home");
        userDir   = userDir + "/Desktop/" + proj_name;
        
            System.out.println(userDir);
         Boolean check = new File(userDir).mkdir();
         
         if(!check)
         { JOptionPane.showMessageDialog(null,"Folder Name already exists"); return false; }
         else
         {   
             userPath = userDir;
             return true;
         }   
         }
        
        
        
             
    }
    
    public void start()
    {
        project_name =  JOptionPane.showInputDialog(null, "Please Enter the name of your project :");
       
       Boolean check = validate_project_name(project_name);
       if(!check)
       { System.out.println("Folder not Created"); return ;}
       
        System.out.println("project name is :  "  + project_name);
        JOptionPane.showMessageDialog(null,"Please Select all the folders corresponding to the versions !!!");
        Helper h = new Helper();
        File[] mydirectory = h.Upload_All();
        version = mydirectory.length;
        if(mydirectory==null)
        {   JOptionPane.showMessageDialog(rootPane,"No Folder has been Selected");
            return ;
        }
//        String proj_name = mydirectory[0].getName();
        new Thread(new Runnable() {
                @Override
                public void run() {
                    select_label.setText(mydirectory[0].getParent());
                    }
            }).start();
        
        Thread T1 = new Thread(new Runnable() {

           @Override
           public void run() {
//               throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               generate(mydirectory , project_name , h);
           }
       });
        
        Thread T2 = new Thread(new Runnable() {

           @Override
           public void run() {
//               throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
              generate_cnk(mydirectory); 
           }
       });
        
        T1.start();
        T2.start();
        
        Thread T3 = new Thread(new Runnable() {

           @Override
           public void run() {
//               throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               XlstoCsv xl = new XlstoCsv();
               File f = new File(userPath + "/" + project_name + ".xls");
               xl.convert_explicit(f, userPath);
               System.out.println("Excel successfully converted into csv");
           }
       });
                
       Thread T4 = new Thread(new Runnable() {

           @Override
           public void run() {
                 
               File folder = new File(userPath);
               CandKFilter1 c = new CandKFilter1();
               for(int i = 0 ; i< version ; i++)
               {
                   File project_file = null;
                   File candkfile = null;
                   if(i+1<10)
                   {
                       project_file = new File(userPath + "/version0" + (i+1) + ".csv");
                       candkfile = new File(userPath + "/cnk_version0" + (i+1) + ".csv");
                   }
                   else
                   {
                       project_file = new File(userPath + "/version" + (i+1) + ".csv");
                       candkfile = new File(userPath + "/cnk_version" + (i+1) + ".csv");
                   }
                    
                   System.out.println(project_file + " and " + candkfile);
                   CSVFile.count = 0;
                   CSVFile.metric_names.clear();
                   c.merge_candk( project_file,candkfile);
               }
               
               System.out.println("all files merged");
                
           }
       }); 
       
       Thread T5 = new Thread(new Runnable() {

           @Override
           public void run() {
//               throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
               GenerateModel gm = new GenerateModel(userPath,version);
               gm.generate();
           }
       });
        try { 
            
            T2.join(); // building  the csv for c and k using understand
            T3.start(); // extracting the csv from excel sheet
            T3.join(); // waiting for extraction to be finished
            T4.start(); // merging excel project file and c and k
            System.out.println("Metrics populated");
            T4.join();
            T5.start();
        } catch (InterruptedException ex) {
            Logger.getLogger(Generate_Full_Report.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: 
         start();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Generate_Full_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Generate_Full_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Generate_Full_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Generate_Full_Report.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Generate_Full_Report().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel select_label;
    // End of variables declaration//GEN-END:variables
}
