/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EvolutionMetric;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.CfsSubsetEval;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.Logistic;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.core.Instances;
import weka.core.converters.ConverterUtils;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;

/**
 *
 * @author aryan_000
 */


class Report_Attribute_Selection
{
     
   Boolean loc , boc , tach , chd , cho , fch , lch , frch , csb , csbs , lca , lcd , wch , wcd , acdf , ataf , wfr , cp ;
   String release_name;
   
   Report_Attribute_Selection()
           {
               loc = boc = tach = chd = cho = fch = lch = frch = csb = csbs = lca = lcd = wcd = wch = acdf = ataf = wfr  = cp = false;
           }
    
}

class Report_ROC
{
    String release_name;
    double roc;
    
    Report_ROC(String release_name , double roc)
    {
        this.release_name = release_name;
        this.roc = roc;
    }
}

public class GenerateReport extends javax.swing.JFrame {

    /**
     * Creates new form GenerateReport
     */
    public GenerateReport() {
        initComponents();
    }
    File[] myfolder = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gen_report_button = new javax.swing.JButton();
        heading = new javax.swing.JLabel();
        img1 = new javax.swing.JLabel();
        file_selection_panel = new javax.swing.JPanel();
        select_file_label = new javax.swing.JLabel();
        path = new javax.swing.JTextField();
        select_folder_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generate Report");

        gen_report_button.setText("Generate Report");
        gen_report_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gen_report_buttonActionPerformed(evt);
            }
        });

        heading.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        heading.setForeground(new java.awt.Color(102, 51, 255));
        heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heading.setText("Generate Report");

        img1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/slide_img4.jpg"))); // NOI18N
        img1.setText(" ");

        select_file_label.setText("Select File : ");

        path.setText(" ");

        select_folder_button.setText("Select Folder");
        select_folder_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_folder_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout file_selection_panelLayout = new javax.swing.GroupLayout(file_selection_panel);
        file_selection_panel.setLayout(file_selection_panelLayout);
        file_selection_panelLayout.setHorizontalGroup(
            file_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, file_selection_panelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(select_file_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(select_folder_button, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        file_selection_panelLayout.setVerticalGroup(
            file_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(file_selection_panelLayout.createSequentialGroup()
                .addGroup(file_selection_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(select_file_label)
                    .addComponent(select_folder_button))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(file_selection_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(23, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(img1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(gen_report_button)
                        .addGap(17, 17, 17))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(file_selection_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(img1, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(gen_report_button, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected Instances useFilter(Instances data) throws Exception {
//        System.out.println("\n2. Filter");
        weka.filters.supervised.attribute.AttributeSelection filter = new weka.filters.supervised.attribute.AttributeSelection();
        CfsSubsetEval eval = new CfsSubsetEval();
        BestFirst search = new BestFirst();
//        GreedyStepwise search = new GreedyStepwise();
//        search.setSearchBackwards(true);
        filter.setEvaluator(eval);
        filter.setSearch(search);
        filter.setInputFormat(data);
        Instances newData = Filter.useFilter(data, filter);
        return newData;
    }
    
    protected double useClassifier1(Instances data) throws Exception {
//        System.out.println("\n 2 Meta Classifier");
        AttributeSelectedClassifier classifier = new AttributeSelectedClassifier();
        Logistic base = new Logistic();
        CfsSubsetEval eval = new CfsSubsetEval();
        BestFirst search = new BestFirst();
        classifier.setClassifier(base);
        classifier.setEvaluator(eval);
        classifier.setSearch(search);
        Evaluation evaluation = new Evaluation(data);
        evaluation.crossValidateModel(classifier, data, 10, new Random(1));
        
        return evaluation.weightedAreaUnderROC();
//        System.out.println("these values are : " + evaluation.pctCorrect());
//        System.out.println("results are :  " + evaluation.toClassDetailsString());
//        System.out.println("classifier results : " + evaluation.toSummaryString());

    }

    private void select_folder_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_folder_buttonActionPerformed
        // TODO add your handling code here:
    String userDir = System.getProperty("user.home");
    JFileChooser folder = new JFileChooser(userDir+"/Desktop");
    folder.setFileSelectionMode(JFileChooser.FILES_ONLY);
    folder.setMultiSelectionEnabled(true);
    FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter("CSV Files  (*.csv)", "csv");
    folder.setFileFilter(xmlfilter);
    
    int return_value = folder.showDialog(null,"Select Folder ");
    if(return_value == JFileChooser.APPROVE_OPTION)
    {
        myfolder = folder.getSelectedFiles();
    }

    if(myfolder!=null)
    {
        JOptionPane.showMessageDialog(null,"The current choosen file directory is : " + myfolder[0].getParent());
    } 
    else
    {
        JOptionPane.showMessageDialog(null,"You have made no selection : ");
        return;
    }

    
//    for(int i =0;i<myfolder.length ; i++)
//            System.out.println(myfolder[i].getName());
    path.setText(myfolder[0].getParent());
        
    }//GEN-LAST:event_select_folder_buttonActionPerformed

    /**
     *
     * @param data
     * @param version
     */
    public Report_Attribute_Selection get_report(Instances data , int version )
    {
        Report_Attribute_Selection report = new Report_Attribute_Selection();
        report.release_name = "Release " + version ;
        for(int i =0;i< data.numAttributes();i++)
        {
            String str = data.attribute(i).name();
            switch(str)
            {
                case "LOC" : report.loc = true; break;
                case "BOC" : report.boc = true; break;
                case "TACH" : report.tach = true; break;
                case "CHD" : report.chd = true;break;
                case "CHO" : report.cho = true; break;
                case "LCD" : report.lcd = true;break;
                case "LCH" : report.lch = true; break;
                case "FCH" : report.fch = true; break;
                case "FRCH" : report.frch = true; break;
                case "CSB" : report.csb = true; break;
                case "CSBS" : report.csbs = true; break;
                case "LCA" : report.lca = true; break;
                case "WCH" : report.wch = true; break;
                case "WCD" : report.wcd = true; break;
                case "ACDF" : report.acdf = true; break;
                case "ATAF" : report.ataf = true; break;
                case "WFR" : report.wfr = true; break;
                case "CP" : report.cp = true; break;
            }
        } 
        return report;
    }
    private void gen_report_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gen_report_buttonActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {
        ArrayList<Report_Attribute_Selection> report_attr = new ArrayList<>();
        ArrayList<Report_ROC> report_roc = new ArrayList<>();
        if(myfolder==null)
        {
            JOptionPane.showMessageDialog(rootPane, "Please select the files");
            return;
        }
        ProgressBar1 pb = new ProgressBar1();
        pb.setVisible(true);
        int total_num = myfolder.length +2;
        int inc = 100 / total_num;
                if(inc==0)
                    inc=1;
        int num = 0 ;
        System.out.println("Number of files selected are : " + myfolder.length);

        for(int i =0;i<myfolder.length;i++)
        {
            String fname = myfolder[i].getPath();
            System.out.println("adding for : " + myfolder[i].getName());
            ConverterUtils.DataSource source = null;
            try {
                source = new ConverterUtils.DataSource(fname);
                Instances data = source.getDataSet();
                if (data.classIndex() == -1)
                data.setClassIndex(data.numAttributes() - 1);

                Remove r = new Remove();
                r.setAttributeIndices("18");
                r.setInvertSelection(false);
                r.setInputFormat(data);
                
                data = Filter.useFilter(data, r);
                data = useFilter(data); 
             report_attr.add(get_report(data,i+1));
            double roc = useClassifier1(data);
            report_roc.add(new Report_ROC("Release"+(i+1) , roc));
                        num += inc ;
                        pb.set("File  " + myfolder[i].getName()+  " added ", num);
                         
                System.out.println("added for " + myfolder[i].getName());
            } catch (Exception ex) {
                Logger.getLogger(GenerateReport.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         
        inc = (100 - num)/2;
        File f1 = null , f2 = null;
        try {
             f1 = generate_attribute_selection_report(report_attr , myfolder);
            System.out.println("attribute generated");
            System.out.println("num is : " + num+inc);
            pb.set("Attribute Generated ", num+inc);
        } catch (IOException ex) {
            Logger.getLogger(GenerateReport.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
             f2 = generate_accuracy_report(report_roc);
            System.out.println("accuracy generated");
            pb.set("Accuracy Generated ", num+inc);
        } catch (IOException ex) {
            Logger.getLogger(GenerateReport.class.getName()).log(Level.SEVERE, null, ex);
        }
          pb.dispose();
          CompleteReport c = new CompleteReport(f1,f2);
          c.setVisible(true);
            }
        }).start();
    }//GEN-LAST:event_gen_report_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel file_selection_panel;
    private javax.swing.JButton gen_report_button;
    private javax.swing.JLabel heading;
    private javax.swing.JLabel img1;
    private javax.swing.JTextField path;
    private javax.swing.JLabel select_file_label;
    private javax.swing.JButton select_folder_button;
    // End of variables declaration//GEN-END:variables

    private File  generate_attribute_selection_report(ArrayList<Report_Attribute_Selection> report_attr , File[] myfolder) throws FileNotFoundException, IOException {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
      
        String fname = myfolder[0].getName();
        String userDir = System.getProperty("user.home");
        Random ran = new Random();
        int x1 = ran.nextInt(1000) + 1;
         userDir   = userDir + "/Desktop/"  +x1 +  "attribute.csv";
         File f = new File(userDir);
         
        System.out.println("file is : " + f);
         StringBuffer data = new StringBuffer();
             
        data.append("Release , LOC , BOC , TACH , CHD , CHO , FCH , LCH , FRCH , CSB , CSBS , LCA , LCD , WCH , WCD , ACDF , ATAF , WFR , CP\n");
        FileOutputStream fos = new FileOutputStream(f) ;
        
            for(int i =0;i<report_attr.size() ; i++)
            {
                Report_Attribute_Selection r = report_attr.get(i);
                data.append(r.release_name);
              
                if(r.loc)
                    data.append(",YES");
                else data.append(",");
                
                if(r.boc)
                    data.append(",YES");
                else data.append(",");
                
                if(r.tach)
                    data.append(",YES");
                else data.append(",");
                
                if(r.chd)
                    data.append(",YES");
                else data.append(",");
                
                if(r.cho)
                    data.append(",YES");
                else data.append(",");
                
                if(r.lcd)
                    data.append(",YES");
                else data.append(",");
                
                if(r.lch)
                    data.append(",YES");
                else data.append(",");
                
                if(r.fch)
                    data.append(",YES");
                else data.append(",");
                
                if(r.frch)
                    data.append(",YES");
                else data.append(",");
                
                if(r.csb)
                    data.append(",YES");
                else data.append(",");
                
                if(r.csbs)
                    data.append(",YES");
                else data.append(",");
                
                if(r.lca)
                    data.append(",YES");
                else data.append(",");
                
                if(r.wch)
                    data.append(",YES");
                else data.append(",");
                
                if(r.wcd)
                    data.append(",YES");
                else data.append(",");
                
                if(r.acdf)
                    data.append(",YES");
                else data.append(",");
                
                if(r.ataf)
                    data.append(",YES");
                else data.append(",");
                
                if(r.wfr)
                    data.append(",YES");
                else data.append(",");
                
                
                
                if(r.cp)
                    data.append(",YES");
                else data.append(",");
                
                data.append("\n");
            }
            
            fos.write(data.toString().getBytes());
           fos.close();
           
           System.out.println("Attribute Report Generated");
               
           return f;
    }

    private File generate_accuracy_report(ArrayList<Report_ROC> report_roc) throws FileNotFoundException, IOException {
        String fname = myfolder[0].getName();
        String userDir = System.getProperty("user.home");
        Random ran = new Random();
        int x1 = ran.nextInt(1000) + 1;
        userDir   = userDir + "/Desktop/" + x1 + "accuracy.csv";
        File f = new File(userDir);
         
        StringBuffer data = new StringBuffer();
        data.append("Release , Accuracy \n");

        FileOutputStream fos = new FileOutputStream(f) ;
            for(int i =0;i<report_roc.size() ; i++)
            {
                Report_ROC r = report_roc.get(i);
                data.append(r.release_name).append(",").append(r.roc).append("\n");
            }
            fos.write(data.toString().getBytes());
            fos.close();
        return f;
    }
}
