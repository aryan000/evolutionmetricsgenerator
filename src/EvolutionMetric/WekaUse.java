/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EvolutionMetric;

import java.io.File;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.CfsSubsetEval;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.Logistic;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.core.Attribute;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.converters.ConverterUtils;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;
import weka.filters.unsupervised.attribute.Reorder;

/**
 *
 * @author aryan_000
 */
public class WekaUse extends javax.swing.JFrame {

    /**
     * Creates new form WekaUse
     */
    public WekaUse() {
        initComponents();
    }
    
    public ConverterUtils.DataSource source = null;
    public Instances data = null;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        heading = new javax.swing.JLabel();
        select_file = new javax.swing.JButton();
        filepath = new javax.swing.JTextField();
        load_file = new javax.swing.JButton();
        attributes_panel = new javax.swing.JPanel();
        attribute_label = new javax.swing.JLabel();
        remove_attribute_button = new javax.swing.JButton();
        attribute_area = new javax.swing.JScrollPane();
        attribute_table = new javax.swing.JTable();
        attr_selector = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        logistic_regr = new javax.swing.JButton();
        roc_panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roc_textarea = new javax.swing.JTextArea();
        roc_label = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        heading.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        heading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        heading.setText("Attribute Selector");

        select_file.setText("Select File");
        select_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_fileActionPerformed(evt);
            }
        });

        filepath.setText(" ");
        filepath.setBorder(javax.swing.BorderFactory.createTitledBorder("File Url"));

        load_file.setText("Load File");
        load_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_fileActionPerformed(evt);
            }
        });

        attribute_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attribute_label.setText("Attributes");

        remove_attribute_button.setText("Remove Selected Attribute ");
        remove_attribute_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_attribute_buttonActionPerformed(evt);
            }
        });

        attribute_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No", "Title 2", "Attribute"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        attribute_table.setColumnSelectionAllowed(true);
        attribute_area.setViewportView(attribute_table);
        attribute_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (attribute_table.getColumnModel().getColumnCount() > 0) {
            attribute_table.getColumnModel().getColumn(0).setResizable(false);
            attribute_table.getColumnModel().getColumn(1).setResizable(false);
            attribute_table.getColumnModel().getColumn(2).setResizable(false);
        }

        attr_selector.setText("Apply Attribute Selection ");
        attr_selector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attr_selectorActionPerformed(evt);
            }
        });

        jButton1.setText("Model 1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Model 2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Model 3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Model 4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attributes_panelLayout = new javax.swing.GroupLayout(attributes_panel);
        attributes_panel.setLayout(attributes_panelLayout);
        attributes_panelLayout.setHorizontalGroup(
            attributes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributes_panelLayout.createSequentialGroup()
                .addGroup(attributes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attribute_area, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(attributes_panelLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(attribute_label, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(attributes_panelLayout.createSequentialGroup()
                        .addComponent(remove_attribute_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attr_selector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(attributes_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        attributes_panelLayout.setVerticalGroup(
            attributes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attributes_panelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(attribute_label, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(attribute_area, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(attributes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(attributes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attr_selector, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remove_attribute_button, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        logistic_regr.setText(" Apply Logistic Regression");
        logistic_regr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logistic_regrActionPerformed(evt);
            }
        });

        roc_textarea.setColumns(20);
        roc_textarea.setRows(5);
        jScrollPane1.setViewportView(roc_textarea);

        roc_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roc_label.setText("ROC CURVE Details ");

        javax.swing.GroupLayout roc_panelLayout = new javax.swing.GroupLayout(roc_panel);
        roc_panel.setLayout(roc_panelLayout);
        roc_panelLayout.setHorizontalGroup(
            roc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roc_panelLayout.createSequentialGroup()
                .addGroup(roc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roc_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roc_panelLayout.createSequentialGroup()
                        .addGap(257, 257, 257)
                        .addComponent(roc_label, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        roc_panelLayout.setVerticalGroup(
            roc_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roc_panelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(roc_label, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(attributes_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(logistic_regr)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(315, 315, 315)
                        .addComponent(roc_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(419, 419, 419)
                        .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(filepath, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(select_file, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(load_file, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(select_file, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filepath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(load_file, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(roc_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(logistic_regr, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(attributes_panel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     public void set(Instances data)
    {
//        System.out.println("Printing attributes");
//            System.out.println("number of attributes is ; " + data.numAttributes());
        this.data = data;
        new Thread(new Runnable() {

            @Override
            public void run() {
            
            
            DefaultTableModel model = (DefaultTableModel) attribute_table.getModel();
            for(int i =0;i<data.numAttributes();i++)
            {
                Attribute a = data.attribute(i);
//                System.out.println(a.name());
                model.addRow(new Object[]{i+1,false,a.name()});
            } 
            
//                System.out.println(data.attributeStats(0));

            }
        }).start();
    }
     
     public void set(Instances data , Boolean reset)
    {
//        System.out.println("Printing attributes");
//            System.out.println("number of attributes is ; " + data.numAttributes());
        
        this.data = data; 
                
        new Thread(new Runnable() {

            @Override
            public void run() {
            
            
            DefaultTableModel model = (DefaultTableModel) attribute_table.getModel();
              
            model.setRowCount(0);
            for(int i =0;i<data.numAttributes();i++)
            {
                Attribute a = data.attribute(i);
//                System.out.println(a.name());
                model.addRow(new Object[]{i+1,false,a.name()});
            } 
            
//                System.out.println(data.attributeStats(0));

            }
        }).start();
    }
     
     public  void set_roc_textarea(Evaluation evaluation)
     {
         new Thread(new Runnable() {

             @Override
             public void run() {
                 
                 String str = "";
                 try {
                     str += evaluation.toClassDetailsString();
                     str += "\n";
                     str += evaluation.toSummaryString();
                     roc_textarea.setText(str);
                 } catch (Exception ex) {
                     Logger.getLogger(WekaUse.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 
             }
         }).start();
     }
     
      protected  void useClassifier1(Instances data) throws Exception
    {
        System.out.println("\n 2 Meta Classifier");
        
        AttributeSelectedClassifier classifier = new AttributeSelectedClassifier();
        Logistic base = new Logistic();
        CfsSubsetEval eval = new CfsSubsetEval();
        BestFirst search = new BestFirst();
        classifier.setClassifier(base);
        classifier.setEvaluator(eval);
        classifier.setSearch(search);
        Evaluation evaluation = new Evaluation(data);
        evaluation.crossValidateModel(classifier, data, 10, new Random(1));
        
        System.out.println("roc value is : " + evaluation.weightedAreaUnderROC());
//        System.out.println("results are :  " + evaluation.toClassDetailsString());
//        System.out.println("classifier results : " + evaluation.toSummaryString());
        
        set_roc_textarea(evaluation);
        
    } 
      public Instances put_cp_to_last(Instances data)
   {
         try {
             String range = "first";
             int cp_index = 0 ;
             for(int i =2;i<=data.numAttributes();i++)
             {
                 if(data.attribute(i-1).name().equals("CP"))
                 {cp_index = i; System.out.println(data.attribute(i).name());
                 System.out.println(i);
                 continue;
                 }
                 else if(!range.equals(""))
                     range+= ",";
                 range +=  i;
             }
             range +=","+ cp_index; 
             Reorder r = new Reorder();
             r.setAttributeIndices(range);
             r.setInputFormat(data);
             data = Filter.useFilter(data, r);
         } catch (Exception ex) {
             Logger.getLogger(GenerateModel.class.getName()).log(Level.SEVERE, null, ex);
         }
         
         
         return data;
             
   }
    private void load_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_fileActionPerformed
        
        String path = filepath.getText();
        
        if(path.trim()==null || path.trim().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"No File has been Selected");
            return;
        }
        
        try {
            // TODO add your handling code here:
            
            source = new ConverterUtils.DataSource(path);
            Instances data = source.getDataSet();
            
            if (data.classIndex() == -1)
                data.setClassIndex(data.numAttributes() - 1);
             
            data = put_cp_to_last(data);
            set(data,true);
//            System.out.println("data is : " + data);
        } catch (Exception ex) {
            Logger.getLogger(WekaUse.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_load_fileActionPerformed

    private void select_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_fileActionPerformed
        // TODO add your handling code here:
         String userDir = System.getProperty("user.home");
        JFileChooser inputFile = new JFileChooser(userDir + "/Desktop");
        inputFile.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter xmlfilter = new FileNameExtensionFilter(
                "CSV Files  (*.csv)", "csv");
        inputFile.setFileFilter(xmlfilter);
        int returnvalue = inputFile.showSaveDialog(this);

        File myfile = null;
        if (returnvalue == JFileChooser.APPROVE_OPTION) {
            myfile = inputFile.getSelectedFile();

//            System.out.println(myfolder);         
        }

        if (myfile != null) {
            filepath.setText(myfile.getPath());

        } else {
            JOptionPane.showMessageDialog(rootPane, "Selection Aborted");
        }
    }//GEN-LAST:event_select_fileActionPerformed

    private void remove_attribute_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_attribute_buttonActionPerformed
        // TODO add your handling code here:
        
        String rem = "";
        for(int i =0;i<attribute_table.getRowCount();i++)
        {
            Boolean value = (Boolean) attribute_table.getModel().getValueAt(i,1);
            if(value==true)
            {
                if(rem.isEmpty())
                    rem += (i+1);
                else
                    rem += "," + (i+1);
            }
        }
       
        System.out.println("removing " + rem);
         Remove r = new Remove();
         Instances ndata = null;
         r.setAttributeIndices(rem);
         r.setInvertSelection(false);
        try {
            System.out.println("checking : " + r.setInputFormat(data));
            data = Filter.useFilter(data, r);
            
        } catch (Exception ex) {
            Logger.getLogger(WekaUse.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        set(data,true);
    }//GEN-LAST:event_remove_attribute_buttonActionPerformed

    protected Instances useFilter(Instances data) throws Exception {
        System.out.println("\n2. Filter");
        weka.filters.supervised.attribute.AttributeSelection filter = new weka.filters.supervised.attribute.AttributeSelection();
        CfsSubsetEval eval = new CfsSubsetEval();
        BestFirst search = new BestFirst();
//        GreedyStepwise search = new GreedyStepwise();
//        search.setSearchBackwards(true);
        filter.setEvaluator(eval);
        filter.setSearch(search);
        filter.setInputFormat(data);
        Instances newData = Filter.useFilter(data, filter);
        
        return newData;
        // newData is the main result
        
       
    }
    private void attr_selectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attr_selectorActionPerformed
        // TODO add your handling code here:
        
             
        try {
             
            
            if (data.classIndex() == -1)
                data.setClassIndex(data.numAttributes() - 1);
             
            data = useFilter(data);
            set(data,true);
        } catch (Exception ex) {
            Logger.getLogger(WekaUse.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_attr_selectorActionPerformed

    private void logistic_regrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logistic_regrActionPerformed
        // TODO add your handling code here:
        
        if(data!=null)
            try {
                useClassifier1(data);
        } catch (Exception ex) {
            Logger.getLogger(WekaUse.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_logistic_regrActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here: 
        String attr = "";
        String attribute ;
        String temp = "";
        for(int i =1;i<data.numAttributes()+1;i++)
        {
             attribute = data.attribute(i-1).name();
             if(attribute.matches("Filename") || attribute.startsWith("File") || attribute.equals("WMC") || attribute.equals("DIT")
                     || attribute.equals("NOC") || attribute.equals("CBO") || attribute.equals("RFC") || attribute.equals("LCOM") || attribute.equals("ICP")
                     )
             {
                 if(!attr.equals(""))
                     attr += ",";
                 attr += i ;
//                 System.out.println(attribute);
             }
                 
        } 
//                System.out.println(attr);
                Remove r = new Remove();
                r.setAttributeIndices(attr);
                r.setInvertSelection(false);
                try {
                    r.setInputFormat(data);
                    data = Filter.useFilter(data, r);
//                    data = useFilter(data); // applying attribute selection
                } catch (Exception ex) {
                    Logger.getLogger(GenerateModel.class.getName()).log(Level.SEVERE, null, ex);
                  }
        
                if (data.classIndex() == -1)
                data.setClassIndex(data.numAttributes() - 1);
                set(data,true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String attr = "";
        String attribute ;
        String temp = "";
        for(int i =1;i<data.numAttributes()+1;i++)
        {
             attribute = data.attribute(i-1).name();
             if(attribute.matches("Filename") || attribute.startsWith("File") || attribute.equals("LOC") || 
                     attribute.equals("BOC")  || attribute.equals("TACH")     || attribute.equals("CHO") || 
                     attribute.equals("CHD")  || attribute.equals("FCH")      || attribute.equals("ICP")  || 
                     attribute.equals("LCH")  || attribute.equals("FRCH")     || attribute.equals("CSB") || 
                     attribute.equals("CSBS") || attribute.equals("LCA")      || attribute.equals("LCD") || 
                     attribute.equals("WCH")  || attribute.equals("WCD")      || attribute.equals("ACDF") || 
                     attribute.equals("ATAF") || attribute.equals("WFR") )
             {
                 if(!attr.equals(""))
                     attr += ",";
                 attr += i ;
//                 System.out.println(attribute);
             }
                 
        } 
//                System.out.println(attr);
                Remove r = new Remove();
                r.setAttributeIndices(attr);
                r.setInvertSelection(false);
                try {
                    r.setInputFormat(data);
                    data = Filter.useFilter(data, r);
                } catch (Exception ex) {
                    Logger.getLogger(GenerateModel.class.getName()).log(Level.SEVERE, null, ex);
                  }
                
        set(data,true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String attr = "";
        String attribute ;
        String temp = "";
        for(int i =1;i<data.numAttributes()+1;i++)
        {
             attribute = data.attribute(i-1).name();
             if(attribute.matches("Filename") || attribute.startsWith("File") || attribute.equals("ICP"))
             {
                 if(!attr.equals(""))
                     attr += ",";
                 attr += i ;
//                 System.out.println(attribute);
             }
                 
        } 
//                System.out.println(attr);
                Remove r = new Remove();
                r.setAttributeIndices(attr);
                r.setInvertSelection(false);
                try {
                    r.setInputFormat(data);
                    data = Filter.useFilter(data, r);
                } catch (Exception ex) {
                    Logger.getLogger(GenerateModel.class.getName()).log(Level.SEVERE, null, ex);
                  }
                
             System.out.println("Model 3 attributes ");
                for(int i = 0 ; i<data.numAttributes(); i++)
                    temp += data.attribute(i).name() + ",";
                
                System.out.println(temp);
                 if (data.classIndex() == -1)  
                    data.setClassIndex(data.numAttributes() - 1);
                 
          set(data,true); 
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String attr = "";
        String attribute ;
        String temp = "";
        for(int i =1;i<data.numAttributes()+1;i++)
        {
             attribute = data.attribute(i-1).name();
             if(attribute.matches("CP") || attribute.equals("ICP"))
             {
                 if(!attr.equals(""))
                     attr += ",";
                 attr += i ;
//                 System.out.println(attribute);
             }
                 
        } 
//                System.out.println(attr);
                Remove r = new Remove();
                r.setAttributeIndices(attr);
                r.setInvertSelection(true);
                try {
                    r.setInputFormat(data);
                    data = Filter.useFilter(data, r);
                } catch (Exception ex) {
                    Logger.getLogger(GenerateModel.class.getName()).log(Level.SEVERE, null, ex);
                  } 
                if (data.classIndex() == -1)
                     data.setClassIndex(data.numAttributes() - 1);
            set(data,true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String path = filepath.getText();
        
        if(path.trim()==null || path.trim().isEmpty())
        {
            JOptionPane.showMessageDialog(null,"Nothing to Reset");
            return;
        }
        
        try {
            // TODO add your handling code here:
            
            source = new ConverterUtils.DataSource(path);
            Instances data = source.getDataSet();
                        
             data = put_cp_to_last(data);
             if (data.classIndex() == -1)
                data.setClassIndex(data.numAttributes() - 1);
            set(data,true);
//            System.out.println("data is : " + data);
        } catch (Exception ex) {
            Logger.getLogger(WekaUse.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WekaUse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WekaUse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WekaUse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WekaUse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WekaUse().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attr_selector;
    private javax.swing.JScrollPane attribute_area;
    private javax.swing.JLabel attribute_label;
    private javax.swing.JTable attribute_table;
    private javax.swing.JPanel attributes_panel;
    private javax.swing.JTextField filepath;
    private javax.swing.JLabel heading;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton load_file;
    private javax.swing.JButton logistic_regr;
    private javax.swing.JButton remove_attribute_button;
    private javax.swing.JLabel roc_label;
    private javax.swing.JPanel roc_panel;
    private javax.swing.JTextArea roc_textarea;
    private javax.swing.JButton select_file;
    // End of variables declaration//GEN-END:variables
}
